name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: sensor-api
  DOCKER_TAG: ${{ github.sha }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: sensor_user
          POSTGRES_PASSWORD: sensor_pass
          POSTGRES_DB: sensor_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run tests
      env:
        DATABASE_URL: postgresql://sensor_user:sensor_pass@localhost:5432/sensor_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        pytest tests/ -v --tb=short

    - name: Test API endpoints
      env:
        DATABASE_URL: postgresql://sensor_user:sensor_pass@localhost:5432/sensor_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        echo "Starting API server in background..."
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health || exit 1

        echo "Testing dashboard..."
        curl -f http://localhost:8000/ || exit 1

        echo "All endpoint tests passed!"

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} .
        docker tag ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} ${{ env.DOCKER_IMAGE }}:latest

    - name: Test Docker image
      run: |
        docker run --rm ${{ env.DOCKER_IMAGE }}:latest python -c "import app.main; print('Image test passed!')"

    - name: Save Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker save ${{ env.DOCKER_IMAGE }}:latest | gzip > sensor-api-image.tar.gz

    - name: Upload Docker image artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: sensor-api-image.tar.gz
        retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        sleep 15

    - name: Check service health
      run: |
        echo "Checking PostgreSQL..."
        docker-compose exec -T postgres pg_isready -U sensor_user || exit 1

        echo "Checking Redis..."
        docker-compose exec -T redis redis-cli ping || exit 1

        echo "Checking API..."
        curl -f http://localhost:8000/health || exit 1

    - name: Run integration tests
      run: |
        echo "Testing POST /readings..."
        response=$(curl -s -X POST http://localhost:8000/readings)
        echo "$response" | grep -q "success" || exit 1

        echo "Testing GET /readings/latest/SENSOR-001..."
        curl -f http://localhost:8000/readings/latest/SENSOR-001 || exit 1

        echo "Testing GET /stats/SENSOR-001..."
        curl -f http://localhost:8000/stats/SENSOR-001 || exit 1

        echo "Testing dashboard..."
        curl -f http://localhost:8000/ | grep -q "IoT Sensor Dashboard" || exit 1

    - name: Check logs
      if: failure()
      run: |
        docker-compose logs api
        docker-compose logs postgres
        docker-compose logs redis

    - name: Cleanup
      if: always()
      run: docker-compose down -v

  deploy-k8s-test:
    name: Test Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Minikube
      uses: medyagh/setup-minikube@latest
      with:
        driver: docker
        kubernetes-version: v1.28.0

    - name: Build image in Minikube
      run: |
        eval $(minikube docker-env)
        docker build -t sensor-api:latest .

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/
        kubectl wait --for=condition=ready pod -l app=postgres --timeout=120s
        kubectl wait --for=condition=ready pod -l app=redis --timeout=120s
        kubectl wait --for=condition=ready pod -l app=sensor-api --timeout=120s

    - name: Check deployment status
      run: |
        kubectl get pods
        kubectl get services
        kubectl logs -l app=sensor-api --tail=50

    - name: Test Kubernetes service
      run: |
        API_URL=$(minikube service sensor-api --url)
        echo "Testing API at $API_URL"
        curl -f $API_URL/health || exit 1
        curl -f $API_URL/ | grep -q "IoT Sensor Dashboard" || exit 1

    - name: Cleanup
      if: always()
      run: |
        kubectl delete -f k8s/ || true
        minikube delete

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [test, build, integration-test, deploy-k8s-test, security-scan]
    if: always()

    steps:
    - name: Pipeline Summary
      run: |
        echo "==================================="
        echo "Pipeline Status Summary"
        echo "==================================="
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Integration Tests: ${{ needs.integration-test.result }}"
        echo "K8s Deploy Test: ${{ needs.deploy-k8s-test.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "==================================="
